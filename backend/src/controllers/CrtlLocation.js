import Location from '../models/Location.js';

// GET all locations (con filtro opcional para activas)
export const getLocations = async (req, res) => {
  try {
    console.log('üì• GET /api/locations - Obteniendo ubicaciones');
    const { active } = req.query;
    const filter = active === 'true' ? { isActive: true } : {};
    
    const locations = await Location.find(filter).sort({ name: 1 });
    console.log(`‚úÖ Encontradas ${locations.length} ubicaciones`);
    res.json(locations);
  } catch (err) {
    console.error('‚ùå Error en getLocations:', err);
    res.status(500).json({ message: err.message });
  }
};

// GET single location by ID
export const getLocationById = async (req, res) => {
  try {
    console.log(`üì• GET /api/locations/${req.params.id}`);
    const location = await Location.findById(req.params.id);
    if (!location) {
      console.log('‚ö†Ô∏è Ubicaci√≥n no encontrada');
      return res.status(404).json({ message: 'Ubicaci√≥n no encontrada' });
    }
    console.log('‚úÖ Ubicaci√≥n encontrada:', location.name);
    res.json(location);
  } catch (err) {
    console.error('‚ùå Error en getLocationById:', err);
    res.status(500).json({ message: err.message });
  }
};

// POST new location
export const createLocation = async (req, res) => {
  try {
    console.log('üì• POST /api/locations - Creando ubicaci√≥n');
    console.log('üì¶ Body recibido:', req.body);
    
    const { name, lat, lng, address, openingHours } = req.body;

    // Validaciones b√°sicas
    if (!name || !lat || !lng || !address) {
      console.log('‚ö†Ô∏è Faltan campos obligatorios');
      return res.status(400).json({ 
        message: 'Nombre, latitud, longitud y direcci√≥n son obligatorios',
        received: { name, lat, lng, address }
      });
    }

    // Validar coordenadas
    if (lat < -90 || lat > 90) {
      return res.status(400).json({ message: 'Latitud inv√°lida (-90 a 90)' });
    }
    if (lng < -180 || lng > 180) {
      return res.status(400).json({ message: 'Longitud inv√°lida (-180 a 180)' });
    }

    const newLocation = new Location({ 
      name: name.trim(), 
      lat: parseFloat(lat), 
      lng: parseFloat(lng), 
      address: address.trim(),
      openingHours: openingHours || "9:00 AM - 6:00 PM"
    });

    console.log('üíæ Guardando ubicaci√≥n:', newLocation);
    const savedLocation = await newLocation.save();
    console.log('‚úÖ Ubicaci√≥n guardada exitosamente:', savedLocation._id);
    
    res.status(201).json(savedLocation);
  } catch (err) {
    console.error('‚ùå Error en createLocation:', err);
    if (err.name === 'ValidationError') {
      return res.status(400).json({ 
        message: 'Error de validaci√≥n', 
        errors: err.errors 
      });
    }
    res.status(400).json({ message: err.message });
  }
};

// PUT update location
export const updateLocation = async (req, res) => {
  try {
    console.log(`üì• PUT /api/locations/${req.params.id}`);
    console.log('üì¶ Body recibido:', req.body);
    
    const location = await Location.findById(req.params.id);
    if (!location) {
      console.log('‚ö†Ô∏è Ubicaci√≥n no encontrada para actualizar');
      return res.status(404).json({ message: 'Ubicaci√≥n no encontrada' });
    }

    const updated = await Location.findByIdAndUpdate(
      req.params.id,
      req.body,
      { 
        new: true, 
        runValidators: true 
      }
    );
    
    console.log('‚úÖ Ubicaci√≥n actualizada:', updated._id);
    res.json(updated);
  } catch (err) {
    console.error('‚ùå Error en updateLocation:', err);
    if (err.name === 'ValidationError') {
      return res.status(400).json({ 
        message: 'Error de validaci√≥n', 
        errors: err.errors 
      });
    }
    res.status(400).json({ message: err.message });
  }
};

// DELETE location
export const deleteLocation = async (req, res) => {
  try {
    console.log(`üì• DELETE /api/locations/${req.params.id}`);
    
    const location = await Location.findById(req.params.id);
    if (!location) {
      console.log('‚ö†Ô∏è Ubicaci√≥n no encontrada para eliminar');
      return res.status(404).json({ message: 'Ubicaci√≥n no encontrada' });
    }

    await Location.findByIdAndDelete(req.params.id);
    console.log('‚úÖ Ubicaci√≥n eliminada:', req.params.id);
    res.json({ message: 'Ubicaci√≥n eliminada' });
  } catch (err) {
    console.error('‚ùå Error en deleteLocation:', err);
    res.status(500).json({ message: err.message });
  }
};